//Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.

//Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function.

//Modifique as concatena√ß√µes para template literals.
//
//function testingScope(escopo) {
//  if (escopo === true) {
//    var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
//    ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
//    console.log(ifScope);
//  } else {
//    var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
//    console.log(elseScope);
//  }
//  console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
//}
//
//testingScope(true);
//
// Resolu√ß√£o

const testingScope = escopo => {
  if (escopo === true) {
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
    console.log(ifScope); 
  } else {
    let elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
    console.log(elseScope);
  }  
}
testingScope(true);

//EXERCICIO 2

//Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.

//Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".

//B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todoarray.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.

//const oddsAndEvens = [13, 3, 4, 10, 7, 2];
//
//const crescente = () => {
//  oddsAndEvens[0] = 2;
//  oddsAndEvens[1] = 3;
//  oddsAndEvens[2] = 4;
//  oddsAndEvens[3] = 7;
//  oddsAndEvens[4] = 10;
//  oddsAndEvens[5] = 13;
//  return oddsAndEvens
//}
//
//const arrayCrescente = crescente();
//
//console.log(`Os n√∫meros ${arrayCrescente} se encontram ordenados de forma crescente!`); // ser√° necess√°rio alterar essa linha üòâ

// exercicio 2 resolvido no modo bonus (apenas para estudar depois)

const oddsAndEvens = [13, 3, 4, 10, 7, 2];

const sortArrayBonus = array => {
  const sortOddsAndEvens = array.sort((a, b) => a - b);
  return sortOddsAndEvens;
}

const sortedArrayBonus = sortArrayBonus(oddsAndEvens);
console.log(`Os n√∫meros ${sortedArrayBonus} se encontram ordenados de forma crescente !`);

//PARTE 2 - EXERCICIOS

//EXERCICIO 1

//Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
//Na matem√°tica, o fatorial de um n√∫mero n√£o negativo N, com a nota√ß√£o N!, √© o produto de todos os inteiros menores ou iguais a N. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.

const fatorial = (num) => {
  let contador = 1;
  for (let index = 2; index <= num; index += 1) {
    contador *= index;
  }
  return contador;
}
console.log(fatorial(5));


// EXERCICIO 2 - Crie uma fun√ß√£o que receba uma frase e retorne qual a maior palavra.

let frase = 'ser√° que isso vai dar certo'

const palavrau = (vaca) => {
  let arrayDaFrase = vaca.split(' ');
  let maior = 0;
  let resultado;

  for (let palavra of arrayDaFrase) {
    if(palavra.length > maior) {
      maior = palavra.length
      resultado = palavra;
    }
  }
  return resultado
}

console.log(palavrau(frase));

/*EXERCICIO 4 
Crie um c√≥digo JavaScript com a seguinte especifica√ß√£o:

N√£o se esque√ßa de usar template literals
Fun√ß√£o 1: Escreva uma fun√ß√£o que vai receber uma string como par√¢metro. Sua fun√ß√£o dever√° procurar pela letra x em uma string qualquer que voc√™ determinar e substituir pela string que voc√™ passou como par√¢metro. Sua fun√ß√£o deve retornar essa nova string.

Exemplo:

String determinada: "Tryber x aqui!"
Par√¢metro: "Bebeto"
Retorno: "Tryber Bebeto aqui!"

Um array com escopo global, que √© o escopo do arquivo JS, nesse caso, contendo cinco strings com suas principais skills.*/






/* Fun√ß√£o 2: Escreva uma fun√ß√£o que vai receber a string retornada da Fun√ß√£o 1 como par√¢metro. Essa fun√ß√£o deve concatenar as skills do array global √† string que foi passada para a Fun√ß√£o 2 via par√¢metro. Voc√™ deve ordenar os skills em ordem alfab√©tica. Sua fun√ß√£o deve retornar essa nova string.
Exemplo:
"Tryber x aqui!
Minhas cinco principais habilidades s√£o:
JavaScript;
HTML; ...*/

const array = ["Android", "iOS", "Architecture", "Teach", "Run"];

function subX (paramOne) {
    const fun1 = paramInner => (
      `Tryber ${paramInner} aqui!

      Tudo bem?`
    );

    let result = `${fun1(paramOne)}

    Minhas cinco principais habilidades s√£o:`;

    array.forEach((skill, index) =>
    result = `${result}

    - ${skill}`);

    result = `
{result}

    #goTrybe
    `;

    return result;
}

console.log(subX("Lucas"));

